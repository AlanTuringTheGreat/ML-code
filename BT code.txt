
#Assignment 3
# Bank account smart contract

// SPDX-License-Identifier: GPL-3.0
pragma solidity >= 0.7.0 <0.9.0; 
contract MyBank
{
      mapping(address=> uint ) private _balances; 
      address public owner; 
      event LogDepositeMade(address accountHoder, uint amount );

      constructor ()
     {
      owner=msg.sender;
       emit LogDepositeMade(msg.sender, 1000);
     }

          function deposite() public payable returns (uint)
         {
         require ((_balances[msg.sender] + msg.value) > _balances[msg.sender] && msg.sender!=address(0));
        _balances[msg.sender] += msg.value; 
        emit LogDepositeMade(msg.sender , msg.value);
        return _balances[msg.sender];
 }
 
      function withdraw (uint withdrawAmount) public returns (uint)
     {
 
         require (_balances[msg.sender] >= withdrawAmount);
         require(msg.sender!=address(0)); 
         require(_balances[msg.sender] > 0); 
         _balances[msg.sender]-=withdrawAmount;
         msg.sender.transfer(withdrawAmount); 
         emit LogDepositeMade(msg.sender , withdrawAmount);
         return _balances[msg.sender];

        }

          function viewBalance() public view returns (uint)
         {
          return _balances[msg.sender];
         }

}

# Assignment 4
# student mark management sytem

// Solidity program to implement
// the above approach
pragma solidity >= 0.8.7;

// Build the Contract
contract MarksManagmtSys
{
	// Create a structure for
	// student details
    struct Student
	{
		int ID;
		string fName;
		string lName;
		int marks;
	}

	address owner;
	int public stdCount = 0;
	mapping(int => Student) public stdRecords;

	modifier onlyOwner
	{
		require(owner == msg.sender);
		_;
	}
	constructor()
	{
		owner=msg.sender;
	}

	// Create a function to add
	// the new records
	function addNewRecords(int _ID,
						string memory _fName,
						string memory _lName,
						int _marks) public onlyOwner
	{
		// Increase the count by 1
		stdCount = stdCount + 1;

		// Fetch the student details
		// with the help of stdCount
		stdRecords[stdCount] = Student(_ID, _fName,
									_lName, _marks);
	}

	// Create a function to add bonus marks
	function bonusMarks(int _bonus) public onlyOwner
	{
		stdRecords[stdCount].marks =
					stdRecords[stdCount].marks + _bonus;
	}
}

